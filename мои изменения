import 'package:flutter/material.dart';


class DecoratedTextField extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
        height: 50,
        alignment: Alignment.center,
        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
        margin: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
        decoration: BoxDecoration(
            color: Colors.grey[300], borderRadius: BorderRadius.circular(10)),
        child: TextField(
          autofocus: true,
          decoration: InputDecoration.collapsed(
            hintText: 'What are we doing today?',
          ),
        ));
  }
}


class ToDayPage extends StatefulWidget {
  @override
  ToDayPageState createState() => ToDayPageState();
}

class ToDayPageState extends State<ToDayPage>
with SingleTickerProviderStateMixin{
  FirebaseUser user;
  final _cloudFirestore = Firestore.instance.collection('todos').snapshots();

  GlobalKey<FormState> _formkey = GlobalKey<FormState>();
  TextEditingController _textController = TextEditingController();
  final uid = Firestore.instance.collection('users').document().documentID;
  bool active = true;
  bool _sel = false;
  String result = "";

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }

  @override
  Widget build (BuildContext context){
    return Scaffold(
      body: StreamBuilder(
        stream: _cloudFirestore,
        builder: (context, snapshot) {
          if(!snapshot.hasData)
          return Container(
            child: CircularProgressIndicator(),
          );
          else{
            return ListView.builder(
              scrollDirection: Axis.vertical,
              itemCount: snapshot.data.documents.length,
              itemBuilder: (context, index) {
                DocumentSnapshot ds = snapshot.data.documents[index];
                return Container(
                  child: Dismissible(
                    resizeDuration: Duration(milliseconds: 1000),
                    secondaryBackground: Container(
                      elevation: 6.0,
                      shape: BeveledRectangleBorder(
                          borderRadius: BorderRadius.circular(50.0)),
                      child: Icon(Icons.check),
                    ),
                    background: Container(
                      elevation: 6.0,

                      // shape: BeveledRectangleBorder(
                      //     borderRadius: BorderRadius.circular(50.0)),
                      child: Icon(Icons.cancel),
                      ),
                    ),
                    key: Key(Firestore.instance
                        .collection('users')
                        .document()
                        .documentID),
                    child: Padding(
                      padding: const EdgeInsets.all(2.0),
                      child: Card(
                        shape: BeveledRectangleBorder(
                            borderRadius: BorderRadius.circular(50.0)),
                        elevation: 6.0,
                        child: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Container(
                            child: Center(
                              child: ListTile(
                                onTap: () {
                                  print("List tile tapped!");
                                  print(Firestore.instance
                                      .collection('todos')
                                      .document());
                                },
                                leading: CircleAvatar(
                                  child: Text(
                                    ds['task'][0].toString().toUpperCase(),
                                    style: TextStyle(
                                        fontSize: 24.0,
                                        fontWeight: FontWeight.bold),
                                  ),
                                ),
                                title: Text(
                                  ds['task'].toString(),
                                  style: TextStyle(),
                                ),
                                trailing: IconButton(
                                  color: Colors.redAccent,
                                  icon: Icon(Icons.delete),
                                  onPressed: () {
                                    print("${ds['task']} is deleted");
                                    Firestore.instance
                                        .collection('todos')
                                        .document(ds.documentID)
                                        .delete();
                              ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ),
                    onDismissed: (direction) {
                      print("${ds['task']} is deleted");
                      Firestore.instance
                          .collection('todos')
                          .document(ds.documentID)
                          .delete();
                  
                    // Working on 
                    }
            )
                )
              }
            );
          }
        }
      ),
      //TodoScreen(),
      floatingActionButton: new FloatingActionButton(
        tooltip: 'Add Item',
        onPressed: _showFormDialog,
        backgroundColor: Colors.black,
        child: new Icon(Icons.add),
                    ),
              );
            }


          
            void _showFormDialog() {
              showBottomSheet(                
                context: context, 
                builder: (context) {
                return Container(
                  height: 200,
                  child: new Column(
                    mainAxisSize: MainAxisSize.max,
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: <Widget>[
                      Container(
                        height: 125,
                        decoration: BoxDecoration(
                          color: Colors.white,
                          borderRadius: BorderRadius.all(Radius.circular(15.0)),
                          boxShadow: [
                            BoxShadow (
                              blurRadius: 10, color: Colors.grey[300], spreadRadius: 5),
                          ]
                        ),
                        child: Column(
                          children: <Widget>[
                             new TextField(
                             onChanged: (String str){
                               setState(() {
                                 
                                result = str; 
                                // вот текст, введенный с клавы
                               });
                             }
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: <Widget>[
                                IconButton(
                                  icon: Icon(Icons.format_list_bulleted),
                                  color: Colors.black,
                                  iconSize: 24.0,
                                  onPressed: () {},
                                ),
                                IconButton(
                                  icon: Icon(Icons.access_time),
                                  color: Colors.black,
                                  iconSize: 24.0,
                                  onPressed: () {},
                                ),
                                IconButton(
                                  onPressed: () {},
                                  icon: Icon(Icons.pin_drop),
                                  iconSize: 24.0,
                                  color: Colors.black,
                                ),
                                IconButton(
                                  icon: Icon(Icons.refresh),
                                  color: Colors.black,
                                  iconSize: 24.0,
                                  onPressed: () {},
                                ),
                                IconButton(
                                  //icon: Icon(Icons.arrow_forward_ios),
                                  icon: Icon(Icons.arrow_forward_ios),
                                  color: Colors.amber,
                                  iconSize: 24.0,
                                  onPressed: () {},
                                ),
                                FlatButton(
                                  //icon: Icon(Icons.arrow_forward_ios),
                                  child: Text('save'),
                                  icon: Icon(Icons.arrow_forward_ios),
                                  color: Colors.amber,
                                  iconSize: 24.0,
                                  onPressed: (){
                                    if (_formkey.currentState.validate()){
                                      _handleSubmit();
                                      _textController.clear();
                                    }
                                  }
                                ),
                              ],
                            ),
                          ],
                        ),
                      ),             
                    ]
                      )
                );
                }
              );
              showDialog(
        context: context, builder: (_) => alert, barrierDismissible: false);
             }
              void _handleSubmit() {
    if (Firestore.instance.collection('todos').document() == null) {
      Firestore.instance.collection('todos').document().setData({"task": ""});
    } else {
      Firestore.instance
          .collection('todos')
          .document()
          .setData({'task': _textController.text.toString()});
      debugPrint("Item added");
    }
  }
  Future<void> logOut() async {
    await FirebaseAuth.instance.signOut().then((val) {
      Navigator.of(context).pop();
      Navigator.of(context).pushReplacementNamed('/');
    }).catchError((e) {
      print(e);
    });
  }

}
            
